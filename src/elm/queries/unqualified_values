[
    (value_qid
        .
        (lower_case_identifier) @value
    )
    (type_annotation
        (lower_case_identifier) @value
    )
    (function_declaration_left
        (lower_case_identifier) @value
    )
    (type_qid
        .
        (type_identifier) @type_
    )
    (constructor_qid
        .
        (constructor_identifier) @constructor
    )
]

=== test input below ===

module Main exposing (..)

import Json.Decode exposing (Decoder, int)


sumDecoder : Decoder Int
sumDecoder =
    Json.Decode.map2 (+)
        (Json.Decode.field "x" int)
        (Json.Decode.field "y" int)

-- === expected output below ===
-- value: {Node lower_case_identifier (7, 0) - (7, 10)}
-- 
-- type_: {Node type_identifier (7, 13) - (7, 20)}
-- 
-- type_: {Node type_identifier (7, 21) - (7, 24)}
-- 
-- value: {Node lower_case_identifier (8, 0) - (8, 10)}
-- 
-- value: {Node lower_case_identifier (10, 31) - (10, 34)}
-- 
-- value: {Node lower_case_identifier (11, 31) - (11, 34)}
-- 
