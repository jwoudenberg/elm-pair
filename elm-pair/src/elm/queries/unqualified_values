[
    (value_qid
        .
        (lower_case_identifier) @value
    )
    (type_annotation
        (lower_case_identifier) @value
    )
    (function_declaration_left
        (lower_case_identifier) @value
    )
    (type_alias_declaration
        (type_identifier) @type_
    )
    (type_declaration
        (type_identifier) @type_
    )
    (type_qid
        .
        (type_identifier) @type_
    )
    (constructor_qid
        .
        (constructor_identifier) @constructor
    )
]

=== test input below ===

module Main exposing (..)

import Json.Decode exposing (Decoder, float, succeed)


type alias Beverage =
    { kind: BeverageKind
    , liters: Float
    }


type BeverageKind
    = HotChocolate
    | Water


decoder : BeverageKind -> Decoder Beverage
decoder kind =
    let
        kindDecoder = succeed kind
    in
    Json.Decode.map2 Beverage
        (Json.Decode.field "kind" kindDecoder)
        (Json.Decode.field "liters" float)

-- === expected output below ===
-- type_: [7:11] Beverage
--
-- type_: [8:12] BeverageKind
--
-- type_: [9:14] Float
--
-- type_: [13:5] BeverageKind
--
-- value: [18:0] decoder
--
-- type_: [18:10] BeverageKind
--
-- type_: [18:26] Decoder
--
-- type_: [18:34] Beverage
--
-- value: [19:0] decoder
--
-- value: [21:8] kindDecoder
--
-- value: [21:22] succeed
--
-- value: [21:30] kind
--
-- constructor: [23:21] Beverage
--
-- value: [24:34] kindDecoder
--
-- value: [25:36] float
--
