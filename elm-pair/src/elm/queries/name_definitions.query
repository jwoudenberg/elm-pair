[
  (function_declaration_left
    (lower_case_identifier) @value
  )
  (lower_pattern
    (lower_case_identifier) @value
  )
  (type_declaration
    name: (type_identifier) @type_
  )
  (type_alias_declaration
    name: (type_identifier) @type_
  )
  (type_alias_declaration
    name: (type_identifier) @constructor
    typeExpression: (type_expression
      part: (record_type)
    )
  )
  (union_variant
    name: (constructor_identifier) @constructor
  )
]

=== test input below ===

module Main exposing (..)


type alias Person =
    { name : String
    , age : Age
    }


type Age
    = AgeInYears Int


isYoung : Age -> Bool
isYoung age =
    let
        (AgeInYears ageInYears) =
            age
    in
    ageInYears < 30


birthYear : Age -> { r | year : Int } -> Int
birthYear (AgeInYears yearsLived) { year } =
  year - yearsLived


safeYoungest : List Age -> Maybe Age
safeYoungest ageList =
    ageList
        |> List.map (\(AgeInYears n) -> n)
        |> List.minimum
        |> Maybe.map AgeInYears


youngest : List Age -> Age
youngest ages =
    case ages of
        [] -> Debug.todo ""
        [single] -> single
        (head :: rest) -> min head (youngest rest)

-- === expected output below ===
-- type_: [5:11] Person
--
-- constructor: [5:11] Person
--
-- type_: [11:5] Age
--
-- constructor: [12:6] AgeInYears
--
-- value: [16:0] isYoung
--
-- value: [16:8] age
--
-- value: [18:20] ageInYears
--
-- value: [25:0] birthYear
--
-- value: [25:22] yearsLived
--
-- value: [25:36] year
--
-- value: [30:0] safeYoungest
--
-- value: [30:13] ageList
--
-- value: [32:34] n
--
-- value: [38:0] youngest
--
-- value: [38:9] ages
--
-- value: [41:9] single
--
-- value: [42:9] head
--
-- value: [42:17] rest
--
