[
  (function_declaration_left
    (lower_case_identifier) @name
  )
  (lower_pattern
    (lower_case_identifier) @name
  )
]

=== test input below ===

module Main exposing (..)


type Age
    = Age Int


isYoung : Age -> Bool
isYoung age =
    let
        (Age ageInYears) =
            age
    in
    ageInYears < 30


birthYear : Age -> { r | year : Int } -> Int
birthYear (Age yearsLived) { year } =
  year - yearsLived


safeYoungest : List Age -> Maybe Age
safeYoungest ageList =
    ageList
        |> List.map (\(Age n) -> n)
        |> List.minimum
        |> Maybe.map Age


youngest : List Age -> Age
youngest ages =
    case ages of
        [] -> Debug.todo ""
        [single] -> single
        (head :: rest) -> min head (youngest rest)

-- === expected output below ===
-- name: [10:0] isYoung
--
-- name: [10:8] age
--
-- name: [12:13] ageInYears
--
-- name: [19:0] birthYear
--
-- name: [19:15] yearsLived
--
-- name: [19:29] year
--
-- name: [24:0] safeYoungest
--
-- name: [24:13] ageList
--
-- name: [26:27] n
--
-- name: [32:0] youngest
--
-- name: [32:9] ages
--
-- name: [35:9] single
--
-- name: [36:9] head
--
-- name: [36:17] rest
